import os
import pathlib
import platform
import subprocess
from typing import Dict, List

import requests

from wingman.todo import Todo

BASE_URL = "https://api.github.com"
HEADER = {"Accept": "application/vnd.github.v3+json"}


def get_basename() -> str:
    plat = platform.system()
    if plat == "Windows":
        basename = subprocess.run(
            ["powershell.exe", "git remote get-url origin"], capture_output=True
        )
    else:
        basename = subprocess.run(["git remote get-url origin"], capture_output=True)
    path = pathlib.Path(basename.stdout.decode().strip()[: -len(".git")])
    username, repo_name = path.parts[-2:]
    return username, repo_name


def get_issue(existing_issues: List[Dict[str, str]], title: str) -> Dict[str, str]:
    for issue in existing_issues:
        if issue["title"] == title:
            return issue


def create_issues(todos: List[Todo], token: str) -> int:
    if not todos:
        print("No todos to create!")
        return

    token = os.getenv("GITHUB_PERSONAL_TOKEN")
    username, repo_name = get_basename()
    url = f"{BASE_URL}/repos/{username}/{repo_name}/issues"
    print(url)
    failed = []
    print("Creating issues...")

    with requests.Session() as session:
        session.headers.update({"authorization": f"token {token}"})
        session.headers.update(HEADER)

        existing_issues = session.get(url).json()
        existing_titles = [issue["title"] for issue in existing_issues]
        for todo in todos:
            print(f"> Issue {todo.title}")
            if todo.body:
                issue_body = f"{todo.body}"
            else:
                issue_body = "Autogenerated by [antoniouaa/wingman](https://github.com/antoniouaa/wingman)"
            body = {
                "title": todo.title,
                "body": issue_body
                + f"\n\nLine: {todo.line_no} in [`{todo.origin}`]({todo.origin})",
            }
            if todo.title not in existing_titles:
                response = session.post(url, json=body)
            else:
                issue = get_issue(existing_issues, todo.title)
                response = session.patch(f"{url}/{issue['number']}", json=body)
            if response.request.method == "POST" and response.status_code != 201:
                print(f"Error: {response.json()['message']}")
                failed.append(todo)
                continue
            number = response.json()["number"]
            link = response.json()["url"]
            print(f"Created: Issue#{number} at {link}")
    return failed