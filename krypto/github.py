import os
import pathlib
import platform
import subprocess
from typing import Dict, List

import requests

from krypto.todo import Todo

BASE_URL = "https://api.github.com"
HEADER = {"Accept": "application/vnd.github.v3+json"}
ALL_ISSUES = {"state": "all"}


def get_basename() -> str:
    plat = platform.system()
    if plat == "Windows":
        basename = subprocess.run(
            ["powershell.exe", "git remote get-url origin"], capture_output=True
        )
    else:
        basename = subprocess.run(["git remote get-url origin"], capture_output=True)
    path = pathlib.Path(basename.stdout.decode().strip()[: -len(".git")])
    username, repo_name = path.parts[-2:]
    return username, repo_name


def get_issue(existing_issues: List[Dict[str, str]], title: str) -> Dict[str, str]:
    for issue in existing_issues:
        if issue["title"] == title:
            return issue


def prepare_body(todo: Todo, username: str, repo_name: str) -> dict:
    if todo.body:
        issue_body = f"{todo.body}"
    else:
        issue_body = (
            "Autogenerated by [antoniouaa/krypto](https://github.com/antoniouaa/krypto)"
        )
    normalised_origin = str(todo.origin).replace("\\", "/")
    return {
        "title": todo.title,
        "body": issue_body
        + f"\n\nLine: {todo.line_no} in [`{todo.origin}`](https://github.com/{username}/{repo_name}/blob/master/{normalised_origin}#L{todo.line_no})",
        "labels": todo.labels,
    }


def create_issues(todos: List[Todo], token: str) -> int:
    if not todos:
        print("No todos to create!")
        return

    username, repo_name = get_basename()
    url = f"{BASE_URL}/repos/{username}/{repo_name}/issues"
    print(url)
    failed = []
    print("Creating issues...\n")

    with requests.Session() as session:
        session.headers.update({"authorization": f"token {token}"})
        session.headers.update(HEADER)

        existing_issues = session.get(url, params=ALL_ISSUES).json()
        existing_titles = [issue["title"].lower() for issue in existing_issues]
        for todo in todos:
            print(f"> Issue {todo.title}")
            print(todo.origin)
            body = prepare_body(todo, username, repo_name)
            if todo.title.lower() not in existing_titles:
                response = session.post(url, json=body)
            else:
                issue = get_issue(existing_issues, todo.title)
                response = session.patch(f"{url}/{issue['number']}", json=body)
            if response.request.method == "POST" and response.status_code != 201:
                print(f"Error: {response.json()['message']}")
                failed.append(todo)
                continue
            number = response.json()["number"]
            link = response.json()["url"]
            print(f"Created: Issue#{number} at {link}\n")
    return failed


# TODO[Enhancement]: Add issue number to TODO in code
# It would be useful to have the assigned issue number from github
# attached to the TODO in code so you can immediateyl identify the TODOs
