import os
import pathlib
import platform
import subprocess
from typing import List, Tuple

import requests

from krypto.todo import Todo

BASE_URL = "https://api.github.com"
ISSUES_URL = "/repos/{}/{}/issues"
ACCEPT = {"Accept": "application/vnd.github.v3+json"}
ALL_ISSUES = {"state": "all"}


def get_basename() -> str:
    plat = platform.system()
    if plat == "Windows":
        basename = subprocess.run(
            ["powershell.exe", "git remote get-url origin"], capture_output=True
        )
    else:
        basename = subprocess.run(["git remote get-url origin"], capture_output=True)
    path = pathlib.Path(basename.stdout.decode().strip()[: -len(".git")])
    username, repo_name = path.parts[-2:]
    return username, repo_name


def prepare_body(todo: Todo, username: str, repo_name: str) -> dict:
    if todo.body:
        issue_body = f"{todo.body}"
    else:
        issue_body = (
            "Autogenerated by [antoniouaa/krypto](https://github.com/antoniouaa/krypto)"
        )
    normalised_origin = str(todo.origin).replace("\\", "/")
    return {
        "title": todo.title,
        "body": issue_body
        + f"\n\nLine: {todo.line_no} in [`{todo.origin}`](https://github.com/{username}/{repo_name}/blob/master/{normalised_origin}#L{todo.line_no})",
        "labels": todo.labels,
    }


def construct_url(username: str, repo_name: str) -> str:
    return BASE_URL + ISSUES_URL.format(username, repo_name)


def create_issue(session: requests.Session, url: str, json: dict) -> Tuple[str, bool]:
    response = session.post(url, json=json)
    return json["title"], response.status_code == 201


def patch_issue(
    session: requests.Session, url: str, json: dict, issue_no: int
) -> Tuple[str, bool]:
    url = f"{url}/{issue_no}"
    response = session.patch(url, json=json)
    return json["title"], response.status_code == 200


def filter_issues(
    session: requests.Session,
    url: str,
    todos: List[Todo],
    issue_state: dict = ALL_ISSUES,
) -> List[Todo]:
    existing = session.get(url, params=issue_state).json()
    existing = {
        issue["title"].lower(): issue
        for issue in existing
        if issue["state"] != "closed"
    }
    filtered = []
    for todo in todos:
        title = todo.title.lower()
        if title in existing:
            todo.issue_no = existing[title]["number"]
            filtered.append(todo)
        else:
            filtered.append(todo)
    return filtered


def main(token: str, todos: List[Todo]) -> Tuple[List[str], List[str]]:
    username, repo_name = get_basename()
    url = construct_url(username, repo_name)
    print(f"Posting to: {url}\n")
    successful = []
    failed = []
    with requests.Session() as session:
        session.headers.update({"authorization": f"token {token}"})
        session.headers.update(ACCEPT)
        todos = filter_issues(session, url, todos, issue_state=ALL_ISSUES)

        for todo in todos:
            json = prepare_body(todo, username, repo_name)
            if not todo.issue_no:
                title, success = create_issue(
                    session,
                    url=url,
                    json=json,
                )
            else:
                title, success = patch_issue(
                    session,
                    url=url,
                    json=json,
                    issue_no=todo.issue_no,
                )
            if success:
                successful.append(title)
            else:
                failed.append(title)
    return successful, failed


# TODO[Enhancement]: Add issue number to TODO in code
# It would be useful to have the assigned issue number from github
# attached to the TODO in code so you can immediateyl identify the TODOs
